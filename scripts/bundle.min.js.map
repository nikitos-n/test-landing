{"version":3,"sources":["advantages.js","form.js","slider.js"],"names":["window","addEventListener","event","handleClickAdvantages","document","querySelectorAll","forEach","item","handleClickAdvantageItem","itemSubtitle","nextElementSibling","circlePlus","lastElementChild","classList","contains","add","remove","preventDefault","formData","errors","isEmailNotValid","isNameEmpty","isQuestionEmpty","values","emailInputValue","nameInputValue","questionTextInputValue","emailInput","querySelector","nameInput","questionTextInput","questionForm","stopPropagation","target","handleChangeEmailInput","handleChangeNameInput","handleChangeQuestionTextInput","async","handleQuestionFormSubmit","value","emailEmptyTextError","test","Boolean","trim","removeAttribute","style","display","setAttribute","nameEmptyTextError","questionTextError","sendQuestion","data","fetch","method","headers","body","JSON","stringify","formObj","console","log","Object","every","questionMessageSuccess","questionMessageError","email","name","question","ok","reset","state","counter","interval","autoRadioSwitch","handleRadioSwitch","radio","index","clearInterval","checkRadio","setInterval","checked"],"mappings":"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","file":"bundle.min.js","sourcesContent":["window.addEventListener('load', event => {\r\n    handleClickAdvantages()\r\n})\r\n\r\nconst handleClickAdvantages = () => {\r\n    const advantageListItems = document.querySelectorAll('.advantages-section__item')\r\n\r\n    advantageListItems.forEach(item => {\r\n        item.addEventListener('click', event => handleClickAdvantageItem(event, item))\r\n    })\r\n}\r\n\r\nconst handleClickAdvantageItem = (event, item) => {\r\n    const itemSubtitle = item.nextElementSibling\r\n    const circlePlus = item.lastElementChild\r\n    \r\n    if(itemSubtitle.classList.contains('section__subtitle_close')) {\r\n        item.classList.add('section__item_open')\r\n        itemSubtitle.classList.remove('section__subtitle_close') \r\n        circlePlus.classList.add('opened') \r\n    } else {\r\n        item.classList.remove('section__item_open')\r\n        itemSubtitle.classList.add('section__subtitle_close')\r\n        circlePlus.classList.remove('opened')\r\n    }\r\n}  \r\n","window.addEventListener('load', event => {\r\n  event.preventDefault()\r\n\r\n  const formData = {\r\n    errors: {\r\n      isEmailNotValid: false,\r\n      isNameEmpty: false,\r\n      isQuestionEmpty: false\r\n    },\r\n    values: {\r\n      emailInputValue: '',\r\n      nameInputValue: '',\r\n      questionTextInputValue: ''\r\n    }\r\n  }\r\n\r\n  const emailInput = document.querySelector('input[name=\"email\"]')\r\n  const nameInput = document.querySelector('input[name=\"name\"]')\r\n  const questionTextInput = document.querySelector('textarea[name=\"question\"]')\r\n\r\n  const questionForm = document.querySelector('form')\r\n\r\n  emailInput.addEventListener('blur', (event) => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    const { target } = event\r\n    handleChangeEmailInput(target, formData)\r\n  })\r\n\r\n  nameInput.addEventListener('blur', (event) => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    const { target } = event\r\n    handleChangeNameInput(target, formData)\r\n  })\r\n  questionTextInput.addEventListener('blur', (event) => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n\r\n    const { target } = event\r\n    handleChangeQuestionTextInput(target, formData)\r\n  })\r\n\r\n  questionForm.addEventListener('submit', async (event) => {\r\n    event.preventDefault()\r\n    event.stopPropagation()\r\n    await handleQuestionFormSubmit(event.target, emailInput, nameInput, questionTextInput, formData)\r\n  })\r\n})\r\n\r\n\r\nconst handleChangeEmailInput = (target, formData) => {\r\n  const { value } = target\r\n  const emailRegExp = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g\r\n  const emailEmptyTextError = document.querySelector('#email-empty')\r\n  \r\n  if (emailRegExp.test(value) && Boolean(value.trim())) {\r\n    formData.errors.isEmailNotValid = false\r\n    target.removeAttribute('id')\r\n    emailEmptyTextError.style.display = 'none'\r\n  } else {\r\n    formData.errors.isEmailNotValid = true\r\n    target.setAttribute('id', 'input-error')\r\n    emailEmptyTextError.style.display = 'inline'\r\n  }\r\n\r\n  formData.values.emailInputValue = value\r\n}\r\n\r\nconst handleChangeNameInput = (target, formData) => {\r\n  const { value } = target\r\n  const nameEmptyTextError = document.querySelector('#name-empty')\r\n  \r\n  if (Boolean(value.trim())) {\r\n    formData.errors.isNameEmpty = false\r\n    target.removeAttribute('id')\r\n    nameEmptyTextError.style.display = 'none'\r\n  } else {\r\n    formData.errors.isNameEmpty = true\r\n    target.setAttribute('id', 'input-error')\r\n    nameEmptyTextError.style.display = 'inline'\r\n  }\r\n  \r\n  formData.values.nameInputValue = value\r\n}\r\n\r\nconst handleChangeQuestionTextInput = (target, formData) => {\r\n  const { value } = target\r\n  const questionTextError = document.querySelector('#question-empty')\r\n\r\n  if (Boolean(value.trim())) {\r\n    formData.errors.isQuestionEmpty = false\r\n    target.removeAttribute('id')\r\n    questionTextError.style.display = 'none'\r\n  } else {\r\n    formData.errors.isQuestionEmpty = true\r\n    target.setAttribute('id', 'input-error')\r\n    questionTextError.style.display = 'inline'\r\n  }\r\n\r\n  formData.values.questionTextInputValue = value\r\n}\r\n\r\nconst sendQuestion = async (data) => {\r\n  const response = await fetch('https://debitorov.net/question', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json;charset=utf-8'\r\n    },\r\n    body: JSON.stringify(data)\r\n  })\r\n\r\n  return response\r\n}\r\n\r\nconst handleQuestionFormSubmit = async (formObj, emailInput, nameInput, questionTextInput, formData) => {\r\n  handleChangeEmailInput(emailInput, formData)\r\n  handleChangeNameInput(nameInput, formData)\r\n  handleChangeQuestionTextInput(questionTextInput, formData)\r\n\r\n  console.log(formData)\r\n\r\n  const formErrors = Object.values(formData.errors)\r\n  if(formErrors.every(value => !value)) {\r\n    const questionMessageSuccess = document.querySelector('#question-success-hide') || document.querySelector('#question-success-show')\r\n    const questionMessageError = document.querySelector('#question-error-hide') || document.querySelector('#question-error-show')\r\n    questionMessageSuccess.setAttribute('id', 'question-success-hide')\r\n    questionMessageError.setAttribute('id', 'question-error-hide')\r\n    \r\n    const { emailInputValue: email, nameInputValue: name, questionTextInputValue: question } = formData.values\r\n    const response = await sendQuestion({ email, name, question })\r\n\r\n    if(response.ok) {\r\n      // If response success show message success\r\n      questionMessageSuccess.setAttribute('id', 'question-success-show')\r\n      formObj.reset()\r\n    } else {\r\n      // Else show message error\r\n      questionMessageError.setAttribute('id', 'question-error-show')\r\n    }\r\n  }\r\n}\r\n","window.addEventListener('load', event => {\r\n  const state = {\r\n      counter: 1,\r\n      interval: null\r\n  }\r\n  \r\n  autoRadioSwitch(state)\r\n  handleRadioSwitch(state)\r\n})\r\n\r\nconst handleRadioSwitch = state => {\r\n  const radioAll = document.querySelectorAll(\"input[type='radio']\")\r\n\r\n  radioAll.forEach((radio, index) => {\r\n    radio.addEventListener('click', event => {\r\n      state.counter = index + 1  \r\n      clearInterval(state.interval)\r\n      autoRadioSwitch(state)\r\n    })\r\n  })\r\n}\r\n\r\nconst autoRadioSwitch = state => {\r\n  checkRadio(state)\r\n\r\n  const interval = setInterval(() => {\r\n    checkRadio(state)\r\n  }, 4000)\r\n\r\n  state.interval = interval\r\n}\r\n\r\nconst checkRadio = state => {\r\n  let { counter } = state\r\n\r\n  const radio = document.querySelector(`#radio${counter}`)\r\n  radio.checked = true\r\n  \r\n  if(counter === 4) {\r\n    counter = 1\r\n  } else {\r\n    counter += 1\r\n  }\r\n  \r\n  state.counter = counter\r\n}"]}